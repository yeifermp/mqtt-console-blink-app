

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Mon Jan 11 20:44:22 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	18F4553
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    29  0000                     
    30                           ; Version 2.31
    31                           ; Generated 13/10/2020 GMT
    32                           ; 
    33                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    34                           ; All rights reserved.
    35                           ; 
    36                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    37                           ; 
    38                           ; Redistribution and use in source and binary forms, with or without modification, are
    39                           ; permitted provided that the following conditions are met:
    40                           ; 
    41                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    42                           ;        conditions and the following disclaimer.
    43                           ; 
    44                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    45                           ;        of conditions and the following disclaimer in the documentation and/or other
    46                           ;        materials provided with the distribution. Publication is not required when
    47                           ;        this file is used in an embedded application.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4553 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataCOMRAM
    67  000B08                     __pidataCOMRAM:
    68                           	callstack 0
    69                           
    70                           ;initializer for _LED_ON_OFF
    71  000B08  01                 	db	low STR_2
    72  000B09  08                 	db	high STR_2
    73                           
    74                           ;initializer for _LED_ON_CMD
    75  000B0A  0A                 	db	low STR_1
    76  000B0B  08                 	db	high STR_1
    77  0000                     _RCREG	set	4014
    78  0000                     _PIE1bits	set	3997
    79  0000                     _INTCONbits	set	4082
    80  0000                     _RCSTA	set	4011
    81  0000                     _TXSTA	set	4012
    82  0000                     _SPBRG	set	4015
    83  0000                     _LATDbits	set	3980
    84  0000                     _LATD	set	3980
    85  0000                     _TRISD	set	3989
    86  0000                     _OSCCON	set	4051
    87  0000                     _RCIF	set	31989
    88  0000                     _TRISC7	set	31911
    89  0000                     _TRISC6	set	31910
    90                           
    91                           	psect	smallconst
    92  000800                     __psmallconst:
    93                           	callstack 0
    94  000800  00                 	db	0
    95  000801                     STR_2:
    96  000801  3C                 	db	60	;'<'
    97  000802  4C                 	db	76	;'L'
    98  000803  65                 	db	101	;'e'
    99  000804  64                 	db	100	;'d'
   100  000805  4F                 	db	79	;'O'
   101  000806  66                 	db	102	;'f'
   102  000807  66                 	db	102	;'f'
   103  000808  3E                 	db	62	;'>'
   104  000809  00                 	db	0
   105  00080A                     STR_1:
   106  00080A  3C                 	db	60	;'<'
   107  00080B  4C                 	db	76	;'L'
   108  00080C  65                 	db	101	;'e'
   109  00080D  64                 	db	100	;'d'
   110  00080E  4F                 	db	79	;'O'
   111  00080F  6E                 	db	110	;'n'
   112  000810  3E                 	db	62	;'>'
   113  000811  00                 	db	0
   114  000812  00                 	db	0	; dummy byte at the end
   115  0000                     
   116                           ; #config settings
   117                           
   118                           	psect	cinit
   119  000966                     __pcinit:
   120                           	callstack 0
   121  000966                     start_initialization:
   122                           	callstack 0
   123  000966                     __initialization:
   124                           	callstack 0
   125                           
   126                           ; Initialize objects allocated to COMRAM (4 bytes)
   127                           ; load TBLPTR registers with __pidataCOMRAM
   128  000966  0E08               	movlw	low __pidataCOMRAM
   129  000968  6EF6               	movwf	tblptrl,c
   130  00096A  0E0B               	movlw	high __pidataCOMRAM
   131  00096C  6EF7               	movwf	tblptrh,c
   132  00096E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   133  000970  6EF8               	movwf	tblptru,c
   134  000972  EE00  F017         	lfsr	0,__pdataCOMRAM
   135  000976  EE10 F004          	lfsr	1,4
   136  00097A                     copy_data0:
   137  00097A  0009               	tblrd		*+
   138  00097C  CFF5 FFEE          	movff	tablat,postinc0
   139  000980  50E5               	movf	postdec1,w,c
   140  000982  50E1               	movf	fsr1l,w,c
   141  000984  E1FA               	bnz	copy_data0
   142                           
   143                           ; Clear objects allocated to BIGRAM (512 bytes)
   144  000986  EE06  F000         	lfsr	0,__pbssBIGRAM
   145  00098A  EE12 F000          	lfsr	1,512
   146  00098E                     clear_0:
   147  00098E  6AEE               	clrf	postinc0,c
   148  000990  50E5               	movf	postdec1,w,c
   149  000992  50E1               	movf	fsr1l,w,c
   150  000994  E1FC               	bnz	clear_0
   151  000996  50E2               	movf	fsr1h,w,c
   152  000998  E1FA               	bnz	clear_0
   153                           
   154                           ; Clear objects allocated to COMRAM (1 bytes)
   155  00099A  6A1B               	clrf	__pbssCOMRAM& (0+255),c
   156  00099C                     end_of_initialization:
   157                           	callstack 0
   158  00099C                     __end_of__initialization:
   159                           	callstack 0
   160  00099C  901C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   161  00099E  921C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   162  0009A0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   163  0009A2  6EF8               	movwf	tblptru,c
   164  0009A4  0100               	movlb	0
   165  0009A6  EF86  F004         	goto	_main	;jump to C main() function
   166                           
   167                           	psect	bssCOMRAM
   168  00001B                     __pbssCOMRAM:
   169                           	callstack 0
   170  00001B                     _position:
   171                           	callstack 0
   172  00001B                     	ds	1
   173                           
   174                           	psect	dataCOMRAM
   175  000017                     __pdataCOMRAM:
   176                           	callstack 0
   177  000017                     	ds	2
   178  000019                     	ds	2
   179                           
   180                           	psect	bssBIGRAM
   181  000600                     __pbssBIGRAM:
   182                           	callstack 0
   183  000600                     _data:
   184                           	callstack 0
   185  000600                     	ds	512
   186                           
   187                           	psect	cstackCOMRAM
   188  000001                     __pcstackCOMRAM:
   189                           	callstack 0
   190  000001                     ??_ISR:
   191                           
   192                           ; 1 bytes @ 0x0
   193  000001                     	ds	2
   194  000003                     ?_strlen:
   195                           	callstack 0
   196  000003                     ?_strchr:
   197                           	callstack 0
   198  000003                     memset@p1:
   199                           	callstack 0
   200  000003                     strchr@ptr:
   201                           	callstack 0
   202  000003                     strlen@s:
   203                           	callstack 0
   204                           
   205                           ; 2 bytes @ 0x2
   206  000003                     	ds	2
   207  000005                     memset@c:
   208                           	callstack 0
   209  000005                     strchr@chr:
   210                           	callstack 0
   211  000005                     strlen@cp:
   212                           	callstack 0
   213                           
   214                           ; 2 bytes @ 0x4
   215  000005                     	ds	2
   216  000007                     ?_strncmp:
   217                           	callstack 0
   218  000007                     memset@n:
   219                           	callstack 0
   220  000007                     strncmp@s1:
   221                           	callstack 0
   222                           
   223                           ; 2 bytes @ 0x6
   224  000007                     	ds	2
   225  000009                     memset@p:
   226                           	callstack 0
   227  000009                     strncmp@s2:
   228                           	callstack 0
   229                           
   230                           ; 2 bytes @ 0x8
   231  000009                     	ds	2
   232  00000B                     strncmp@len:
   233                           	callstack 0
   234                           
   235                           ; 2 bytes @ 0xA
   236  00000B                     	ds	2
   237  00000D                     ??_strncmp:
   238                           
   239                           ; 1 bytes @ 0xC
   240  00000D                     	ds	1
   241  00000E                     ?_strstr:
   242                           	callstack 0
   243  00000E                     strstr@s1:
   244                           	callstack 0
   245                           
   246                           ; 2 bytes @ 0xD
   247  00000E                     	ds	2
   248  000010                     strstr@s2:
   249                           	callstack 0
   250                           
   251                           ; 2 bytes @ 0xF
   252  000010                     	ds	2
   253  000012                     data_received@ptr:
   254                           	callstack 0
   255  000012                     is_command@command:
   256                           	callstack 0
   257                           
   258                           ; 2 bytes @ 0x11
   259  000012                     	ds	2
   260  000014                     is_command@ptr:
   261                           	callstack 0
   262                           
   263                           ; 2 bytes @ 0x13
   264  000014                     	ds	2
   265  000016                     main@action:
   266                           	callstack 0
   267                           
   268                           ; 1 bytes @ 0x15
   269  000016                     	ds	1
   270                           
   271 ;;
   272 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   273 ;;
   274 ;; *************** function _main *****************
   275 ;; Defined at:
   276 ;;		line 102 in file "main.c"
   277 ;; Parameters:    Size  Location     Type
   278 ;;		None
   279 ;; Auto vars:     Size  Location     Type
   280 ;;  action          1   21[COMRAM] enum E4992
   281 ;; Return value:  Size  Location     Type
   282 ;;                  1    wreg      void 
   283 ;; Registers used:
   284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   285 ;; Tracked objects:
   286 ;;		On entry : 0/0
   287 ;;		On exit  : 0/0
   288 ;;		Unchanged: 0/0
   289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   290 ;;      Params:         0       0       0       0       0       0       0       0       0
   291 ;;      Locals:         1       0       0       0       0       0       0       0       0
   292 ;;      Temps:          0       0       0       0       0       0       0       0       0
   293 ;;      Totals:         1       0       0       0       0       0       0       0       0
   294 ;;Total ram usage:        1 bytes
   295 ;; Hardware stack levels required when called:    5
   296 ;; This function calls:
   297 ;;		_USART_Init
   298 ;;		_data_received
   299 ;;		_get_action
   300 ;;		_memset
   301 ;; This function is called by:
   302 ;;		Startup code after reset
   303 ;; This function uses a non-reentrant model
   304 ;;
   305                           
   306                           	psect	text0
   307  00090C                     __ptext0:
   308                           	callstack 0
   309  00090C                     _main:
   310                           	callstack 26
   311                           
   312                           ;main.c: 103: OSCCON = 0xF2;
   313                           
   314                           ;incstack = 0
   315  00090C  0EF2               	movlw	242
   316  00090E  6ED3               	movwf	211,c	;volatile
   317                           
   318                           ;main.c: 104: USART_Init();
   319  000910  EC77  F005         	call	_USART_Init	;wreg free
   320                           
   321                           ;main.c: 105: memset(data, 0, 512);
   322  000914  0E00               	movlw	low _data
   323  000916  6E03               	movwf	memset@p1^0,c
   324  000918  0E06               	movlw	high _data
   325  00091A  6E04               	movwf	(memset@p1+1)^0,c
   326  00091C  0E00               	movlw	0
   327  00091E  6E06               	movwf	(memset@c+1)^0,c
   328  000920  0E00               	movlw	0
   329  000922  6E05               	movwf	memset@c^0,c
   330  000924  0E02               	movlw	2
   331  000926  6E08               	movwf	(memset@n+1)^0,c
   332  000928  0E00               	movlw	0
   333  00092A  6E07               	movwf	memset@n^0,c
   334  00092C  EC1F  F005         	call	_memset	;wreg free
   335                           
   336                           ;main.c: 106: position = 0;
   337  000930  0E00               	movlw	0
   338  000932  6E1B               	movwf	_position^0,c
   339                           
   340                           ;main.c: 108: TRISD = 0;
   341  000934  0E00               	movlw	0
   342  000936  6E95               	movwf	149,c	;volatile
   343                           
   344                           ;main.c: 109: LATD = 0;
   345  000938  0E00               	movlw	0
   346  00093A  6E8C               	movwf	140,c	;volatile
   347  00093C                     l1138:
   348                           
   349                           ;main.c: 112: if (data_received()) {
   350  00093C  EC4B  F005         	call	_data_received	;wreg free
   351  000940  0900               	iorlw	0
   352  000942  B4D8               	btfsc	status,2,c
   353  000944  D7FB               	goto	l1138
   354                           
   355                           ;main.c: 113: action_t action = get_action();
   356  000946  ECF0  F004         	call	_get_action	;wreg free
   357  00094A  6E16               	movwf	main@action^0,c
   358                           
   359                           ;main.c: 115: switch (action) {
   360  00094C  D004               	goto	l1144
   361  00094E                     l54:
   362                           
   363                           ;main.c: 117: LATDbits.LATD1 = 1;
   364  00094E  828C               	bsf	140,1,c	;volatile
   365                           
   366                           ;main.c: 118: break;
   367  000950  D7F5               	goto	l1138
   368  000952                     l56:
   369                           
   370                           ;main.c: 121: LATDbits.LATD1 = 0;
   371  000952  928C               	bcf	140,1,c	;volatile
   372                           
   373                           ;main.c: 122: break;
   374  000954  D7F3               	goto	l1138
   375  000956                     l1144:
   376  000956  5016               	movf	main@action^0,w,c
   377                           
   378                           ; Switch size 1, requested type "simple"
   379                           ; Number of cases is 2, Range of values is 0 to 1
   380                           ; switch strategies available:
   381                           ; Name         Instructions Cycles
   382                           ; simple_byte            7     4 (average)
   383                           ;	Chosen strategy is simple_byte
   384  000958  0A00               	xorlw	0	; case 0
   385  00095A  B4D8               	btfsc	status,2,c
   386  00095C  D7F8               	goto	l54
   387  00095E  0A01               	xorlw	1	; case 1
   388  000960  B4D8               	btfsc	status,2,c
   389  000962  D7F7               	goto	l56
   390  000964  D7EB               	goto	l1138
   391  000966                     __end_of_main:
   392                           	callstack 0
   393                           
   394 ;; *************** function _memset *****************
   395 ;; Defined at:
   396 ;;		line 8 in file "/opt/microchip/xc8/v2.31/pic/sources/c90/common/memset.c"
   397 ;; Parameters:    Size  Location     Type
   398 ;;  p1              2    2[COMRAM] PTR void 
   399 ;;		 -> data(512), 
   400 ;;  c               2    4[COMRAM] int 
   401 ;;  n               2    6[COMRAM] unsigned int 
   402 ;; Auto vars:     Size  Location     Type
   403 ;;  p               2    8[COMRAM] PTR unsigned char 
   404 ;;		 -> data(512), 
   405 ;; Return value:  Size  Location     Type
   406 ;;                  2    2[COMRAM] PTR void 
   407 ;; Registers used:
   408 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   409 ;; Tracked objects:
   410 ;;		On entry : 0/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   414 ;;      Params:         6       0       0       0       0       0       0       0       0
   415 ;;      Locals:         2       0       0       0       0       0       0       0       0
   416 ;;      Temps:          0       0       0       0       0       0       0       0       0
   417 ;;      Totals:         8       0       0       0       0       0       0       0       0
   418 ;;Total ram usage:        8 bytes
   419 ;; Hardware stack levels used:    1
   420 ;; Hardware stack levels required when called:    1
   421 ;; This function calls:
   422 ;;		Nothing
   423 ;; This function is called by:
   424 ;;		_main
   425 ;; This function uses a non-reentrant model
   426 ;;
   427                           
   428                           	psect	text1
   429  000A3E                     __ptext1:
   430                           	callstack 0
   431  000A3E                     _memset:
   432                           	callstack 29
   433                           
   434                           ;incstack = 0
   435  000A3E  C003  F009         	movff	memset@p1,memset@p
   436  000A42  C004  F00A         	movff	memset@p1+1,memset@p+1
   437  000A46  D008               	goto	l1094
   438  000A48                     l1090:
   439  000A48  C009  FFD9         	movff	memset@p,fsr2l
   440  000A4C  C00A  FFDA         	movff	memset@p+1,fsr2h
   441  000A50  C005  FFDF         	movff	memset@c,indf2
   442  000A54  4A09               	infsnz	memset@p^0,f,c
   443  000A56  2A0A               	incf	(memset@p+1)^0,f,c
   444  000A58                     l1094:
   445  000A58  0607               	decf	memset@n^0,f,c
   446  000A5A  A0D8               	btfss	status,0,c
   447  000A5C  0608               	decf	(memset@n+1)^0,f,c
   448  000A5E  2807               	incf	memset@n^0,w,c
   449  000A60  E1F3               	bnz	l1090
   450  000A62  2808               	incf	(memset@n+1)^0,w,c
   451  000A64  B4D8               	btfsc	status,2,c
   452  000A66  0012               	return	
   453  000A68  D7EF               	goto	l1090
   454  000A6A                     __end_of_memset:
   455                           	callstack 0
   456                           
   457 ;; *************** function _get_action *****************
   458 ;; Defined at:
   459 ;;		line 140 in file "main.c"
   460 ;; Parameters:    Size  Location     Type
   461 ;;		None
   462 ;; Auto vars:     Size  Location     Type
   463 ;;		None
   464 ;; Return value:  Size  Location     Type
   465 ;;                  1    wreg      enum E4992
   466 ;; Registers used:
   467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   468 ;; Tracked objects:
   469 ;;		On entry : 0/0
   470 ;;		On exit  : 0/0
   471 ;;		Unchanged: 0/0
   472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   473 ;;      Params:         0       0       0       0       0       0       0       0       0
   474 ;;      Locals:         0       0       0       0       0       0       0       0       0
   475 ;;      Temps:          0       0       0       0       0       0       0       0       0
   476 ;;      Totals:         0       0       0       0       0       0       0       0       0
   477 ;;Total ram usage:        0 bytes
   478 ;; Hardware stack levels used:    1
   479 ;; Hardware stack levels required when called:    4
   480 ;; This function calls:
   481 ;;		_is_command
   482 ;; This function is called by:
   483 ;;		_main
   484 ;; This function uses a non-reentrant model
   485 ;;
   486                           
   487                           	psect	text2
   488  0009E0                     __ptext2:
   489                           	callstack 0
   490  0009E0                     _get_action:
   491                           	callstack 26
   492                           
   493                           ;main.c: 141: if (is_command(LED_ON_CMD)) {
   494                           
   495                           ;incstack = 0
   496  0009E0  0E0A               	movlw	low STR_1
   497  0009E2  6E12               	movwf	is_command@command^0,c
   498  0009E4  0E08               	movlw	high STR_1
   499  0009E6  6E13               	movwf	(is_command@command+1)^0,c
   500  0009E8  EC35  F005         	call	_is_command	;wreg free
   501  0009EC  0900               	iorlw	0
   502  0009EE  B4D8               	btfsc	status,2,c
   503  0009F0  D002               	goto	l1116
   504                           
   505                           ;main.c: 142: return LED_ON;
   506  0009F2  0E00               	movlw	0
   507  0009F4  0012               	return	
   508  0009F6                     l1116:
   509  0009F6  0E01               	movlw	low STR_2
   510  0009F8  6E12               	movwf	is_command@command^0,c
   511  0009FA  0E08               	movlw	high STR_2
   512  0009FC  6E13               	movwf	(is_command@command+1)^0,c
   513  0009FE  EC35  F005         	call	_is_command	;wreg free
   514  000A02  0900               	iorlw	0
   515  000A04  B4D8               	btfsc	status,2,c
   516  000A06  D002               	goto	l1122
   517                           
   518                           ;main.c: 144: return LED_OFF;
   519  000A08  0E01               	movlw	1
   520  000A0A  0012               	return	
   521  000A0C                     l1122:
   522                           
   523                           ;main.c: 145: };main.c: 147: return NO_OP;
   524  000A0C  0E02               	movlw	2
   525  000A0E  0012               	return		;funcret
   526  000A10                     __end_of_get_action:
   527                           	callstack 0
   528                           
   529 ;; *************** function _is_command *****************
   530 ;; Defined at:
   531 ;;		line 150 in file "main.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;  command         2   17[COMRAM] PTR const unsigned char 
   534 ;;		 -> STR_2(9), STR_1(8), 
   535 ;; Auto vars:     Size  Location     Type
   536 ;;  ptr             2   19[COMRAM] PTR unsigned char 
   537 ;;		 -> NULL(0), data(512), 
   538 ;; Return value:  Size  Location     Type
   539 ;;                  1    wreg      unsigned char 
   540 ;; Registers used:
   541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   542 ;; Tracked objects:
   543 ;;		On entry : 0/0
   544 ;;		On exit  : 0/0
   545 ;;		Unchanged: 0/0
   546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   547 ;;      Params:         2       0       0       0       0       0       0       0       0
   548 ;;      Locals:         2       0       0       0       0       0       0       0       0
   549 ;;      Temps:          0       0       0       0       0       0       0       0       0
   550 ;;      Totals:         4       0       0       0       0       0       0       0       0
   551 ;;Total ram usage:        4 bytes
   552 ;; Hardware stack levels used:    1
   553 ;; Hardware stack levels required when called:    3
   554 ;; This function calls:
   555 ;;		_strstr
   556 ;; This function is called by:
   557 ;;		_get_action
   558 ;; This function uses a non-reentrant model
   559 ;;
   560                           
   561                           	psect	text3
   562  000A6A                     __ptext3:
   563                           	callstack 0
   564  000A6A                     _is_command:
   565                           	callstack 26
   566                           
   567                           ;main.c: 151: char * ptr = strstr(data, command);
   568                           
   569                           ;incstack = 0
   570  000A6A  0E00               	movlw	low _data
   571  000A6C  6E0E               	movwf	strstr@s1^0,c
   572  000A6E  0E06               	movlw	high _data
   573  000A70  6E0F               	movwf	(strstr@s1+1)^0,c
   574  000A72  C012  F010         	movff	is_command@command,strstr@s2
   575  000A76  C013  F011         	movff	is_command@command+1,strstr@s2+1
   576  000A7A  EC0A  F004         	call	_strstr	;wreg free
   577  000A7E  C00E  F014         	movff	?_strstr,is_command@ptr
   578  000A82  C00F  F015         	movff	?_strstr+1,is_command@ptr+1
   579                           
   580                           ;main.c: 153: if (ptr != (0)) {
   581  000A86  5014               	movf	is_command@ptr^0,w,c
   582  000A88  1015               	iorwf	(is_command@ptr+1)^0,w,c
   583  000A8A  B4D8               	btfsc	status,2,c
   584  000A8C  D002               	goto	l1084
   585                           
   586                           ;main.c: 154: return 1;
   587  000A8E  0E01               	movlw	1
   588  000A90  0012               	return	
   589  000A92                     l1084:
   590                           
   591                           ;main.c: 155: };main.c: 157: return 0;
   592  000A92  0E00               	movlw	0
   593  000A94  0012               	return		;funcret
   594  000A96                     __end_of_is_command:
   595                           	callstack 0
   596                           
   597 ;; *************** function _data_received *****************
   598 ;; Defined at:
   599 ;;		line 130 in file "main.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;		None
   602 ;; Auto vars:     Size  Location     Type
   603 ;;  ptr             2   17[COMRAM] PTR unsigned char 
   604 ;;		 -> NULL(0), data(512), 
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      unsigned char 
   607 ;; Registers used:
   608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   614 ;;      Params:         0       0       0       0       0       0       0       0       0
   615 ;;      Locals:         2       0       0       0       0       0       0       0       0
   616 ;;      Temps:          0       0       0       0       0       0       0       0       0
   617 ;;      Totals:         2       0       0       0       0       0       0       0       0
   618 ;;Total ram usage:        2 bytes
   619 ;; Hardware stack levels used:    1
   620 ;; Hardware stack levels required when called:    3
   621 ;; This function calls:
   622 ;;		_strstr
   623 ;; This function is called by:
   624 ;;		_main
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           	psect	text4
   629  000A96                     __ptext4:
   630                           	callstack 0
   631  000A96                     _data_received:
   632                           	callstack 27
   633                           
   634                           ;main.c: 131: char * ptr = strstr(data, ">");
   635                           
   636                           ;incstack = 0
   637  000A96  0E00               	movlw	low _data
   638  000A98  6E0E               	movwf	strstr@s1^0,c
   639  000A9A  0E06               	movlw	high _data
   640  000A9C  6E0F               	movwf	(strstr@s1+1)^0,c
   641  000A9E  0E08               	movlw	low (STR_2+7)
   642  000AA0  6E10               	movwf	strstr@s2^0,c
   643  000AA2  0E08               	movlw	high (STR_2+7)
   644  000AA4  6E11               	movwf	(strstr@s2+1)^0,c
   645  000AA6  EC0A  F004         	call	_strstr	;wreg free
   646  000AAA  C00E  F012         	movff	?_strstr,data_received@ptr
   647  000AAE  C00F  F013         	movff	?_strstr+1,data_received@ptr+1
   648                           
   649                           ;main.c: 133: if (ptr != (0)) {
   650  000AB2  5012               	movf	data_received@ptr^0,w,c
   651  000AB4  1013               	iorwf	(data_received@ptr+1)^0,w,c
   652  000AB6  B4D8               	btfsc	status,2,c
   653  000AB8  D002               	goto	l1104
   654                           
   655                           ;main.c: 134: return 1;
   656  000ABA  0E01               	movlw	1
   657  000ABC  0012               	return	
   658  000ABE                     l1104:
   659                           
   660                           ;main.c: 135: };main.c: 137: return 0;
   661  000ABE  0E00               	movlw	0
   662  000AC0  0012               	return		;funcret
   663  000AC2                     __end_of_data_received:
   664                           	callstack 0
   665                           
   666 ;; *************** function _strstr *****************
   667 ;; Defined at:
   668 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c90/common/strstr.c"
   669 ;; Parameters:    Size  Location     Type
   670 ;;  s1              2   13[COMRAM] PTR const unsigned char 
   671 ;;		 -> NULL(0), data(512), 
   672 ;;  s2              2   15[COMRAM] PTR const unsigned char 
   673 ;;		 -> STR_3(2), STR_2(9), STR_1(8), 
   674 ;; Auto vars:     Size  Location     Type
   675 ;;		None
   676 ;; Return value:  Size  Location     Type
   677 ;;                  2   13[COMRAM] PTR unsigned char 
   678 ;; Registers used:
   679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   685 ;;      Params:         4       0       0       0       0       0       0       0       0
   686 ;;      Locals:         0       0       0       0       0       0       0       0       0
   687 ;;      Temps:          0       0       0       0       0       0       0       0       0
   688 ;;      Totals:         4       0       0       0       0       0       0       0       0
   689 ;;Total ram usage:        4 bytes
   690 ;; Hardware stack levels used:    1
   691 ;; Hardware stack levels required when called:    2
   692 ;; This function calls:
   693 ;;		_strchr
   694 ;;		_strlen
   695 ;;		_strncmp
   696 ;; This function is called by:
   697 ;;		_data_received
   698 ;;		_is_command
   699 ;; This function uses a non-reentrant model
   700 ;;
   701                           
   702                           	psect	text5
   703  000814                     __ptext5:
   704                           	callstack 0
   705  000814                     _strstr:
   706                           	callstack 26
   707                           
   708                           ;incstack = 0
   709  000814  D031               	goto	l1068
   710  000816                     l1060:
   711  000816  C00E  F007         	movff	strstr@s1,strncmp@s1
   712  00081A  C00F  F008         	movff	strstr@s1+1,strncmp@s1+1
   713  00081E  C010  F009         	movff	strstr@s2,strncmp@s2
   714  000822  C011  F00A         	movff	strstr@s2+1,strncmp@s2+1
   715  000826  C010  F003         	movff	strstr@s2,strlen@s
   716  00082A  C011  F004         	movff	strstr@s2+1,strlen@s+1
   717  00082E  EC08  F005         	call	_strlen	;wreg free
   718  000832  C003  F00B         	movff	?_strlen,strncmp@len
   719  000836  C004  F00C         	movff	?_strlen+1,strncmp@len+1
   720  00083A  EC4C  F004         	call	_strncmp	;wreg free
   721  00083E  5007               	movf	?_strncmp^0,w,c
   722  000840  1008               	iorwf	(?_strncmp+1)^0,w,c
   723  000842  A4D8               	btfss	status,2,c
   724  000844  D005               	goto	l1066
   725  000846  C00E  F00E         	movff	strstr@s1,?_strstr
   726  00084A  C00F  F00F         	movff	strstr@s1+1,?_strstr+1
   727  00084E  0012               	return	
   728  000850                     l1066:
   729  000850  0E01               	movlw	1
   730  000852  240E               	addwf	strstr@s1^0,w,c
   731  000854  6E03               	movwf	strchr@ptr^0,c
   732  000856  0E00               	movlw	0
   733  000858  200F               	addwfc	(strstr@s1+1)^0,w,c
   734  00085A  6E04               	movwf	(strchr@ptr+1)^0,c
   735  00085C  C010  FFF6         	movff	strstr@s2,tblptrl
   736  000860  C011  FFF7         	movff	strstr@s2+1,tblptrh
   737  000864                     	if	0	;tblptru may be non-zero
   738  000864                     	endif
   739  000864                     	if	0	;tblptru may be non-zero
   740  000864                     	endif
   741  000864  0008               	tblrd		*
   742  000866  50F5               	movf	tablat,w,c
   743  000868  6E05               	movwf	strchr@chr^0,c
   744  00086A  6A06               	clrf	(strchr@chr+1)^0,c
   745  00086C  ECD5  F004         	call	_strchr	;wreg free
   746  000870  C003  F00E         	movff	?_strchr,strstr@s1
   747  000874  C004  F00F         	movff	?_strchr+1,strstr@s1+1
   748  000878                     l1068:
   749  000878  500E               	movf	strstr@s1^0,w,c
   750  00087A  100F               	iorwf	(strstr@s1+1)^0,w,c
   751  00087C  B4D8               	btfsc	status,2,c
   752  00087E  D007               	goto	u250
   753  000880  C00E  FFD9         	movff	strstr@s1,fsr2l
   754  000884  C00F  FFDA         	movff	strstr@s1+1,fsr2h
   755  000888  50DF               	movf	indf2,w,c
   756  00088A  A4D8               	btfss	status,2,c
   757  00088C  D7C4               	goto	l1060
   758  00088E                     u250:
   759  00088E  0E00               	movlw	0
   760  000890  6E0E               	movwf	?_strstr^0,c
   761  000892  0E00               	movlw	0
   762  000894  6E0F               	movwf	(?_strstr+1)^0,c
   763  000896  0012               	return		;funcret
   764  000898                     __end_of_strstr:
   765                           	callstack 0
   766                           
   767 ;; *************** function _strncmp *****************
   768 ;; Defined at:
   769 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c90/common/strncmp.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;  s1              2    6[COMRAM] PTR const unsigned char 
   772 ;;		 -> NULL(0), data(512), 
   773 ;;  s2              2    8[COMRAM] PTR const unsigned char 
   774 ;;		 -> STR_3(2), STR_2(9), STR_1(8), 
   775 ;;  len             2   10[COMRAM] unsigned int 
   776 ;; Auto vars:     Size  Location     Type
   777 ;;		None
   778 ;; Return value:  Size  Location     Type
   779 ;;                  2    6[COMRAM] int 
   780 ;; Registers used:
   781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   782 ;; Tracked objects:
   783 ;;		On entry : 0/0
   784 ;;		On exit  : 0/0
   785 ;;		Unchanged: 0/0
   786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   787 ;;      Params:         6       0       0       0       0       0       0       0       0
   788 ;;      Locals:         0       0       0       0       0       0       0       0       0
   789 ;;      Temps:          1       0       0       0       0       0       0       0       0
   790 ;;      Totals:         7       0       0       0       0       0       0       0       0
   791 ;;Total ram usage:        7 bytes
   792 ;; Hardware stack levels used:    1
   793 ;; Hardware stack levels required when called:    1
   794 ;; This function calls:
   795 ;;		Nothing
   796 ;; This function is called by:
   797 ;;		_strstr
   798 ;; This function uses a non-reentrant model
   799 ;;
   800                           
   801                           	psect	text6
   802  000898                     __ptext6:
   803                           	callstack 0
   804  000898                     _strncmp:
   805                           	callstack 26
   806                           
   807                           ;incstack = 0
   808  000898  D02C               	goto	l1040
   809  00089A                     l1030:
   810  00089A  C007  FFD9         	movff	strncmp@s1,fsr2l
   811  00089E  C008  FFDA         	movff	strncmp@s1+1,fsr2h
   812  0008A2  50DF               	movf	indf2,w,c
   813  0008A4  B4D8               	btfsc	status,2,c
   814  0008A6  D00F               	goto	u190
   815  0008A8  C007  FFD9         	movff	strncmp@s1,fsr2l
   816  0008AC  C008  FFDA         	movff	strncmp@s1+1,fsr2h
   817  0008B0  50DF               	movf	indf2,w,c
   818  0008B2  6E0D               	movwf	??_strncmp^0,c
   819  0008B4  C009  FFF6         	movff	strncmp@s2,tblptrl
   820  0008B8  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
   821  0008BC                     	if	0	;tblptru may be non-zero
   822  0008BC                     	endif
   823  0008BC                     	if	0	;tblptru may be non-zero
   824  0008BC                     	endif
   825  0008BC  0008               	tblrd		*
   826  0008BE  50F5               	movf	tablat,w,c
   827  0008C0  180D               	xorwf	??_strncmp^0,w,c
   828  0008C2  B4D8               	btfsc	status,2,c
   829  0008C4  D012               	goto	l1038
   830  0008C6                     u190:
   831  0008C6  C007  FFD9         	movff	strncmp@s1,fsr2l
   832  0008CA  C008  FFDA         	movff	strncmp@s1+1,fsr2h
   833  0008CE  50DF               	movf	indf2,w,c
   834  0008D0  6E0D               	movwf	??_strncmp^0,c
   835  0008D2  C009  FFF6         	movff	strncmp@s2,tblptrl
   836  0008D6  C00A  FFF7         	movff	strncmp@s2+1,tblptrh
   837  0008DA                     	if	0	;tblptru may be non-zero
   838  0008DA                     	endif
   839  0008DA                     	if	0	;tblptru may be non-zero
   840  0008DA                     	endif
   841  0008DA  0008               	tblrd		*
   842  0008DC  50F5               	movf	tablat,w,c
   843  0008DE  5C0D               	subwf	??_strncmp^0,w,c
   844  0008E0  6E07               	movwf	?_strncmp^0,c
   845  0008E2  6A08               	clrf	(?_strncmp+1)^0,c
   846  0008E4  A0D8               	btfss	status,0,c
   847  0008E6  0608               	decf	(?_strncmp+1)^0,f,c
   848  0008E8  0012               	return	
   849  0008EA                     l1038:
   850  0008EA  4A07               	infsnz	strncmp@s1^0,f,c
   851  0008EC  2A08               	incf	(strncmp@s1+1)^0,f,c
   852  0008EE  4A09               	infsnz	strncmp@s2^0,f,c
   853  0008F0  2A0A               	incf	(strncmp@s2+1)^0,f,c
   854  0008F2                     l1040:
   855  0008F2  060B               	decf	strncmp@len^0,f,c
   856  0008F4  A0D8               	btfss	status,0,c
   857  0008F6  060C               	decf	(strncmp@len+1)^0,f,c
   858  0008F8  280B               	incf	strncmp@len^0,w,c
   859  0008FA  E1CF               	bnz	l1030
   860  0008FC  280C               	incf	(strncmp@len+1)^0,w,c
   861  0008FE  A4D8               	btfss	status,2,c
   862  000900  D7CC               	goto	l1030
   863  000902  0E00               	movlw	0
   864  000904  6E08               	movwf	(?_strncmp+1)^0,c
   865  000906  0E00               	movlw	0
   866  000908  6E07               	movwf	?_strncmp^0,c
   867  00090A  0012               	return		;funcret
   868  00090C                     __end_of_strncmp:
   869                           	callstack 0
   870                           
   871 ;; *************** function _strlen *****************
   872 ;; Defined at:
   873 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c90/common/strlen.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;  s               2    2[COMRAM] PTR const unsigned char 
   876 ;;		 -> STR_3(2), STR_2(9), STR_1(8), 
   877 ;; Auto vars:     Size  Location     Type
   878 ;;  cp              2    4[COMRAM] PTR const unsigned char 
   879 ;;		 -> STR_3(2), STR_2(9), STR_1(8), 
   880 ;; Return value:  Size  Location     Type
   881 ;;                  2    2[COMRAM] unsigned int 
   882 ;; Registers used:
   883 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
   884 ;; Tracked objects:
   885 ;;		On entry : 0/0
   886 ;;		On exit  : 0/0
   887 ;;		Unchanged: 0/0
   888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   889 ;;      Params:         2       0       0       0       0       0       0       0       0
   890 ;;      Locals:         2       0       0       0       0       0       0       0       0
   891 ;;      Temps:          0       0       0       0       0       0       0       0       0
   892 ;;      Totals:         4       0       0       0       0       0       0       0       0
   893 ;;Total ram usage:        4 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; Hardware stack levels required when called:    1
   896 ;; This function calls:
   897 ;;		Nothing
   898 ;; This function is called by:
   899 ;;		_strstr
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           	psect	text7
   904  000A10                     __ptext7:
   905                           	callstack 0
   906  000A10                     _strlen:
   907                           	callstack 26
   908                           
   909                           ;incstack = 0
   910  000A10  C003  F005         	movff	strlen@s,strlen@cp
   911  000A14  C004  F006         	movff	strlen@s+1,strlen@cp+1
   912  000A18  D002               	goto	l1022
   913  000A1A                     l1020:
   914  000A1A  4A05               	infsnz	strlen@cp^0,f,c
   915  000A1C  2A06               	incf	(strlen@cp+1)^0,f,c
   916  000A1E                     l1022:
   917  000A1E  C005  FFF6         	movff	strlen@cp,tblptrl
   918  000A22  C006  FFF7         	movff	strlen@cp+1,tblptrh
   919  000A26                     	if	0	;tblptru may be non-zero
   920  000A26                     	endif
   921  000A26                     	if	0	;tblptru may be non-zero
   922  000A26                     	endif
   923  000A26  0008               	tblrd		*
   924  000A28  50F5               	movf	tablat,w,c
   925  000A2A  0900               	iorlw	0
   926  000A2C  A4D8               	btfss	status,2,c
   927  000A2E  D7F5               	goto	l1020
   928  000A30  5003               	movf	strlen@s^0,w,c
   929  000A32  5C05               	subwf	strlen@cp^0,w,c
   930  000A34  6E03               	movwf	?_strlen^0,c
   931  000A36  5004               	movf	(strlen@s+1)^0,w,c
   932  000A38  5806               	subwfb	(strlen@cp+1)^0,w,c
   933  000A3A  6E04               	movwf	(?_strlen+1)^0,c
   934  000A3C  0012               	return		;funcret
   935  000A3E                     __end_of_strlen:
   936                           	callstack 0
   937                           
   938 ;; *************** function _strchr *****************
   939 ;; Defined at:
   940 ;;		line 4 in file "/opt/microchip/xc8/v2.31/pic/sources/c90/common/strchr.c"
   941 ;; Parameters:    Size  Location     Type
   942 ;;  ptr             2    2[COMRAM] PTR const unsigned char 
   943 ;;		 -> NULL(0), data(512), 
   944 ;;  chr             2    4[COMRAM] int 
   945 ;; Auto vars:     Size  Location     Type
   946 ;;		None
   947 ;; Return value:  Size  Location     Type
   948 ;;                  2    2[COMRAM] PTR unsigned char 
   949 ;; Registers used:
   950 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   956 ;;      Params:         4       0       0       0       0       0       0       0       0
   957 ;;      Locals:         0       0       0       0       0       0       0       0       0
   958 ;;      Temps:          1       0       0       0       0       0       0       0       0
   959 ;;      Totals:         5       0       0       0       0       0       0       0       0
   960 ;;Total ram usage:        5 bytes
   961 ;; Hardware stack levels used:    1
   962 ;; Hardware stack levels required when called:    1
   963 ;; This function calls:
   964 ;;		Nothing
   965 ;; This function is called by:
   966 ;;		_strstr
   967 ;; This function uses a non-reentrant model
   968 ;;
   969                           
   970                           	psect	text8
   971  0009AA                     __ptext8:
   972                           	callstack 0
   973  0009AA                     _strchr:
   974                           	callstack 26
   975                           
   976                           ;incstack = 0
   977  0009AA  C003  FFD9         	movff	strchr@ptr,fsr2l
   978  0009AE  C004  FFDA         	movff	strchr@ptr+1,fsr2h
   979  0009B2  5005               	movf	strchr@chr^0,w,c
   980  0009B4  18DE               	xorwf	postinc2,w,c
   981  0009B6  A4D8               	btfss	status,2,c
   982  0009B8  D005               	goto	l1052
   983  0009BA  C003  F003         	movff	strchr@ptr,?_strchr
   984  0009BE  C004  F004         	movff	strchr@ptr+1,?_strchr+1
   985  0009C2  0012               	return	
   986  0009C4                     l1052:
   987  0009C4  C003  FFD9         	movff	strchr@ptr,fsr2l
   988  0009C8  C004  FFDA         	movff	strchr@ptr+1,fsr2h
   989  0009CC  4A03               	infsnz	strchr@ptr^0,f,c
   990  0009CE  2A04               	incf	(strchr@ptr+1)^0,f,c
   991  0009D0  50DF               	movf	indf2,w,c
   992  0009D2  A4D8               	btfss	status,2,c
   993  0009D4  D7EA               	goto	_strchr
   994  0009D6  0E00               	movlw	0
   995  0009D8  6E03               	movwf	?_strchr^0,c
   996  0009DA  0E00               	movlw	0
   997  0009DC  6E04               	movwf	(?_strchr+1)^0,c
   998  0009DE  0012               	return		;funcret
   999  0009E0                     __end_of_strchr:
  1000                           	callstack 0
  1001                           
  1002 ;; *************** function _USART_Init *****************
  1003 ;; Defined at:
  1004 ;;		line 160 in file "main.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;		None
  1007 ;; Auto vars:     Size  Location     Type
  1008 ;;		None
  1009 ;; Return value:  Size  Location     Type
  1010 ;;                  1    wreg      void 
  1011 ;; Registers used:
  1012 ;;		wreg, status,2
  1013 ;; Tracked objects:
  1014 ;;		On entry : 0/0
  1015 ;;		On exit  : 0/0
  1016 ;;		Unchanged: 0/0
  1017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1018 ;;      Params:         0       0       0       0       0       0       0       0       0
  1019 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1020 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1021 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1022 ;;Total ram usage:        0 bytes
  1023 ;; Hardware stack levels used:    1
  1024 ;; Hardware stack levels required when called:    1
  1025 ;; This function calls:
  1026 ;;		Nothing
  1027 ;; This function is called by:
  1028 ;;		_main
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           	psect	text9
  1033  000AEE                     __ptext9:
  1034                           	callstack 0
  1035  000AEE                     _USART_Init:
  1036                           	callstack 29
  1037                           
  1038                           ;main.c: 161: TRISC6=0;
  1039                           
  1040                           ;incstack = 0
  1041  000AEE  9C94               	bcf	3988,6,c	;volatile
  1042                           
  1043                           ;main.c: 162: TRISC7=1;
  1044  000AF0  8E94               	bsf	3988,7,c	;volatile
  1045                           
  1046                           ;main.c: 163: SPBRG = 12;
  1047  000AF2  0E0C               	movlw	12
  1048  000AF4  6EAF               	movwf	175,c	;volatile
  1049                           
  1050                           ;main.c: 164: TXSTA = 0x20;
  1051  000AF6  0E20               	movlw	32
  1052  000AF8  6EAC               	movwf	172,c	;volatile
  1053                           
  1054                           ;main.c: 165: RCSTA = 0x90;
  1055  000AFA  0E90               	movlw	144
  1056  000AFC  6EAB               	movwf	171,c	;volatile
  1057                           
  1058                           ;main.c: 166: INTCONbits.GIE = 1;
  1059  000AFE  8EF2               	bsf	242,7,c	;volatile
  1060                           
  1061                           ;main.c: 167: INTCONbits.PEIE = 1;
  1062  000B00  8CF2               	bsf	242,6,c	;volatile
  1063                           
  1064                           ;main.c: 168: PIE1bits.RCIE = 1;
  1065  000B02  8A9D               	bsf	157,5,c	;volatile
  1066                           
  1067                           ;main.c: 169: PIE1bits.TXIE = 0;
  1068  000B04  989D               	bcf	157,4,c	;volatile
  1069  000B06  0012               	return		;funcret
  1070  000B08                     __end_of_USART_Init:
  1071                           	callstack 0
  1072                           
  1073 ;; *************** function _ISR *****************
  1074 ;; Defined at:
  1075 ;;		line 173 in file "main.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;		None
  1078 ;; Auto vars:     Size  Location     Type
  1079 ;;		None
  1080 ;; Return value:  Size  Location     Type
  1081 ;;                  1    wreg      void 
  1082 ;; Registers used:
  1083 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1084 ;; Tracked objects:
  1085 ;;		On entry : 0/0
  1086 ;;		On exit  : 0/0
  1087 ;;		Unchanged: 0/0
  1088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1089 ;;      Params:         0       0       0       0       0       0       0       0       0
  1090 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1091 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1092 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1093 ;;Total ram usage:        2 bytes
  1094 ;; Hardware stack levels used:    1
  1095 ;; This function calls:
  1096 ;;		Nothing
  1097 ;; This function is called by:
  1098 ;;		Interrupt level 2
  1099 ;; This function uses a non-reentrant model
  1100 ;;
  1101                           
  1102                           	psect	intcode
  1103  000008                     __pintcode:
  1104                           	callstack 0
  1105  000008                     _ISR:
  1106                           	callstack 26
  1107                           
  1108                           ;incstack = 0
  1109  000008  821C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1110  00000A  ED61  F005         	call	int_func,f	;refresh shadow registers
  1111                           
  1112                           	psect	intcode_body
  1113  000AC2                     __pintcode_body:
  1114                           	callstack 26
  1115  000AC2                     int_func:
  1116                           	callstack 26
  1117  000AC2  0006               	pop		; remove dummy address from shadow register refresh
  1118  000AC4  CFD9 F001          	movff	fsr2l,??_ISR
  1119  000AC8  CFDA F002          	movff	fsr2h,??_ISR+1
  1120                           
  1121                           ;main.c: 174: if (RCIF) {
  1122  000ACC  AA9E               	btfss	3998,5,c	;volatile
  1123  000ACE  D009               	goto	i2l82
  1124                           
  1125                           ;main.c: 175: data[position] = RCREG;
  1126  000AD0  0E00               	movlw	low _data
  1127  000AD2  241B               	addwf	_position^0,w,c
  1128  000AD4  6ED9               	movwf	fsr2l,c
  1129  000AD6  6ADA               	clrf	fsr2h,c
  1130  000AD8  0E06               	movlw	high _data
  1131  000ADA  22DA               	addwfc	fsr2h,f,c
  1132  000ADC  CFAE FFDF          	movff	4014,indf2	;volatile
  1133                           
  1134                           ;main.c: 176: position++;
  1135  000AE0  2A1B               	incf	_position^0,f,c
  1136  000AE2                     i2l82:
  1137  000AE2  C002  FFDA         	movff	??_ISR+1,fsr2h
  1138  000AE6  C001  FFD9         	movff	??_ISR,fsr2l
  1139  000AEA  921C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1140  000AEC  0011               	retfie		f
  1141  000AEE                     __end_of_ISR:
  1142                           	callstack 0
  1143                           
  1144                           	psect	rparam
  1145  0000                     
  1146                           	psect	temp
  1147  00001C                     btemp:
  1148                           	callstack 0
  1149  00001C                     	ds	1
  1150  0000                     int$flags	set	btemp
  1151  0000                     wtemp8	set	btemp+1
  1152  0000                     ttemp5	set	btemp+1
  1153  0000                     ttemp6	set	btemp+4
  1154  0000                     ttemp7	set	btemp+8
  1155                           
  1156                           	psect	idloc
  1157                           
  1158                           ;Config register IDLOC0 @ 0x200000
  1159                           ;	unspecified, using default values
  1160  200000                     	org	2097152
  1161  200000  FF                 	db	255
  1162                           
  1163                           ;Config register IDLOC1 @ 0x200001
  1164                           ;	unspecified, using default values
  1165  200001                     	org	2097153
  1166  200001  FF                 	db	255
  1167                           
  1168                           ;Config register IDLOC2 @ 0x200002
  1169                           ;	unspecified, using default values
  1170  200002                     	org	2097154
  1171  200002  FF                 	db	255
  1172                           
  1173                           ;Config register IDLOC3 @ 0x200003
  1174                           ;	unspecified, using default values
  1175  200003                     	org	2097155
  1176  200003  FF                 	db	255
  1177                           
  1178                           ;Config register IDLOC4 @ 0x200004
  1179                           ;	unspecified, using default values
  1180  200004                     	org	2097156
  1181  200004  FF                 	db	255
  1182                           
  1183                           ;Config register IDLOC5 @ 0x200005
  1184                           ;	unspecified, using default values
  1185  200005                     	org	2097157
  1186  200005  FF                 	db	255
  1187                           
  1188                           ;Config register IDLOC6 @ 0x200006
  1189                           ;	unspecified, using default values
  1190  200006                     	org	2097158
  1191  200006  FF                 	db	255
  1192                           
  1193                           ;Config register IDLOC7 @ 0x200007
  1194                           ;	unspecified, using default values
  1195  200007                     	org	2097159
  1196  200007  FF                 	db	255
  1197                           
  1198                           	psect	config
  1199                           
  1200                           ;Config register CONFIG1L @ 0x300000
  1201                           ;	PLL Prescaler Selection bits
  1202                           ;	PLLDIV = 2, Divide by 2 (8 MHz oscillator input)
  1203                           ;	System Clock Postscaler Selection bits
  1204                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1205                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1206                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1207  300000                     	org	3145728
  1208  300000  01                 	db	1
  1209                           
  1210                           ;Config register CONFIG1H @ 0x300001
  1211                           ;	Oscillator Selection bits
  1212                           ;	FOSC = INTOSCIO_EC, Internal oscillator, port function on RA6, EC used by USB (INTIO)
  1213                           ;	Fail-Safe Clock Monitor Enable bit
  1214                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1215                           ;	Internal/External Oscillator Switchover bit
  1216                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1217  300001                     	org	3145729
  1218  300001  08                 	db	8
  1219                           
  1220                           ;Config register CONFIG2L @ 0x300002
  1221                           ;	Power-up Timer Enable bit
  1222                           ;	PWRT = OFF, PWRT disabled
  1223                           ;	Brown-out Reset Enable bits
  1224                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1225                           ;	Brown-out Reset Voltage bits
  1226                           ;	BORV = 3, Minimum setting
  1227                           ;	USB Voltage Regulator Enable bit
  1228                           ;	VREGEN = OFF, USB voltage regulator disabled
  1229  300002                     	org	3145730
  1230  300002  1F                 	db	31
  1231                           
  1232                           ;Config register CONFIG2H @ 0x300003
  1233                           ;	Watchdog Timer Enable bit
  1234                           ;	WDT = ON, WDT enabled
  1235                           ;	Watchdog Timer Postscale Select bits
  1236                           ;	WDTPS = 32768, 1:32768
  1237  300003                     	org	3145731
  1238  300003  1F                 	db	31
  1239                           
  1240                           ; Padding undefined space
  1241  300004                     	org	3145732
  1242  300004  FF                 	db	255
  1243                           
  1244                           ;Config register CONFIG3H @ 0x300005
  1245                           ;	CCP2 MUX bit
  1246                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  1247                           ;	PORTB A/D Enable bit
  1248                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  1249                           ;	Low-Power Timer 1 Oscillator Enable bit
  1250                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1251                           ;	MCLR Pin Enable bit
  1252                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1253  300005                     	org	3145733
  1254  300005  83                 	db	131
  1255                           
  1256                           ;Config register CONFIG4L @ 0x300006
  1257                           ;	Stack Full/Underflow Reset Enable bit
  1258                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1259                           ;	Single-Supply ICSP Enable bit
  1260                           ;	LVP = ON, Single-Supply ICSP enabled
  1261                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1262                           ;	ICPRT = OFF, ICPORT disabled
  1263                           ;	Extended Instruction Set Enable bit
  1264                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1265                           ;	Background Debugger Enable bit
  1266                           ;	DEBUG = 0x1, unprogrammed default
  1267  300006                     	org	3145734
  1268  300006  85                 	db	133
  1269                           
  1270                           ; Padding undefined space
  1271  300007                     	org	3145735
  1272  300007  FF                 	db	255
  1273                           
  1274                           ;Config register CONFIG5L @ 0x300008
  1275                           ;	Code Protection bit
  1276                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1277                           ;	Code Protection bit
  1278                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1279                           ;	Code Protection bit
  1280                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1281                           ;	Code Protection bit
  1282                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1283  300008                     	org	3145736
  1284  300008  0F                 	db	15
  1285                           
  1286                           ;Config register CONFIG5H @ 0x300009
  1287                           ;	Boot Block Code Protection bit
  1288                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1289                           ;	Data EEPROM Code Protection bit
  1290                           ;	CPD = OFF, Data EEPROM is not code-protected
  1291  300009                     	org	3145737
  1292  300009  C0                 	db	192
  1293                           
  1294                           ;Config register CONFIG6L @ 0x30000A
  1295                           ;	Write Protection bit
  1296                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1297                           ;	Write Protection bit
  1298                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1299                           ;	Write Protection bit
  1300                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1301                           ;	Write Protection bit
  1302                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1303  30000A                     	org	3145738
  1304  30000A  0F                 	db	15
  1305                           
  1306                           ;Config register CONFIG6H @ 0x30000B
  1307                           ;	Configuration Register Write Protection bit
  1308                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1309                           ;	Boot Block Write Protection bit
  1310                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1311                           ;	Data EEPROM Write Protection bit
  1312                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1313  30000B                     	org	3145739
  1314  30000B  E0                 	db	224
  1315                           
  1316                           ;Config register CONFIG7L @ 0x30000C
  1317                           ;	Table Read Protection bit
  1318                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1319                           ;	Table Read Protection bit
  1320                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1321                           ;	Table Read Protection bit
  1322                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1323                           ;	Table Read Protection bit
  1324                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1325  30000C                     	org	3145740
  1326  30000C  0F                 	db	15
  1327                           
  1328                           ;Config register CONFIG7H @ 0x30000D
  1329                           ;	Boot Block Table Read Protection bit
  1330                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1331  30000D                     	org	3145741
  1332  30000D  40                 	db	64
  1333                           tosu	equ	0xFFF
  1334                           tosh	equ	0xFFE
  1335                           tosl	equ	0xFFD
  1336                           stkptr	equ	0xFFC
  1337                           pclatu	equ	0xFFB
  1338                           pclath	equ	0xFFA
  1339                           pcl	equ	0xFF9
  1340                           tblptru	equ	0xFF8
  1341                           tblptrh	equ	0xFF7
  1342                           tblptrl	equ	0xFF6
  1343                           tablat	equ	0xFF5
  1344                           prodh	equ	0xFF4
  1345                           prodl	equ	0xFF3
  1346                           indf0	equ	0xFEF
  1347                           postinc0	equ	0xFEE
  1348                           postdec0	equ	0xFED
  1349                           preinc0	equ	0xFEC
  1350                           plusw0	equ	0xFEB
  1351                           fsr0h	equ	0xFEA
  1352                           fsr0l	equ	0xFE9
  1353                           wreg	equ	0xFE8
  1354                           indf1	equ	0xFE7
  1355                           postinc1	equ	0xFE6
  1356                           postdec1	equ	0xFE5
  1357                           preinc1	equ	0xFE4
  1358                           plusw1	equ	0xFE3
  1359                           fsr1h	equ	0xFE2
  1360                           fsr1l	equ	0xFE1
  1361                           bsr	equ	0xFE0
  1362                           indf2	equ	0xFDF
  1363                           postinc2	equ	0xFDE
  1364                           postdec2	equ	0xFDD
  1365                           preinc2	equ	0xFDC
  1366                           plusw2	equ	0xFDB
  1367                           fsr2h	equ	0xFDA
  1368                           fsr2l	equ	0xFD9
  1369                           status	equ	0xFD8

Data Sizes:
    Strings     17
    Constant    0
    Data        4
    BSS         513
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     22      27
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[2]), STR_2(CODE[9]), STR_1(CODE[8]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 512
		 -> NULL(NULL[0]), data(BIGRAM[512]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[2]), STR_2(CODE[9]), STR_1(CODE[8]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[2]), STR_2(CODE[9]), STR_1(CODE[8]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 512
		 -> NULL(NULL[0]), data(BIGRAM[512]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 512
		 -> NULL(NULL[0]), data(BIGRAM[512]), 

    strstr@s2	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_3(CODE[2]), STR_2(CODE[9]), STR_1(CODE[8]), 

    strstr@s1	PTR const unsigned char  size(2) Largest target is 512
		 -> NULL(NULL[0]), data(BIGRAM[512]), 

    memset@p1	PTR void  size(2) Largest target is 512
		 -> data(BIGRAM[512]), 

    memset@p	PTR unsigned char  size(2) Largest target is 512
		 -> data(BIGRAM[512]), 

    is_command@command	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[8]), 

    is_command@ptr	PTR unsigned char  size(2) Largest target is 512
		 -> NULL(NULL[0]), data(BIGRAM[512]), 

    sp__strstr	PTR unsigned char  size(2) Largest target is 512
		 -> NULL(NULL[0]), data(BIGRAM[512]), 

    data_received@ptr	PTR unsigned char  size(2) Largest target is 512
		 -> NULL(NULL[0]), data(BIGRAM[512]), 

    sp__memset	PTR void  size(2) Largest target is 512
		 -> data(BIGRAM[512]), 

    LED_ON_OFF	PTR const unsigned char  size(2) Largest target is 9
		 -> STR_2(CODE[9]), 

    LED_ON_CMD	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 


Critical Paths under _main in COMRAM

    _get_action->_is_command
    _is_command->_strstr
    _data_received->_strstr
    _strstr->_strncmp
    _strncmp->_strlen

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3065
                                             21 COMRAM     1     1      0
                         _USART_Init
                      _data_received
                         _get_action
                             _memset
 ---------------------------------------------------------------------------------
 (1) _memset                                               8     2      6     324
                                              2 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (1) _get_action                                           0     0      0    1446
                         _is_command
 ---------------------------------------------------------------------------------
 (2) _is_command                                           4     2      2    1446
                                             17 COMRAM     4     2      2
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _data_received                                        2     2      0    1272
                                             17 COMRAM     2     2      0
                             _strstr
 ---------------------------------------------------------------------------------
 (3) _strstr                                               4     0      4    1249
                                             13 COMRAM     4     0      4
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              7     1      6     362
                                              6 COMRAM     7     1      6
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (4) _strlen                                               4     2      2     166
                                              2 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _strchr                                               5     1      4     240
                                              2 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USART_Init
   _data_received
     _strstr
       _strchr
       _strlen
       _strncmp
         _strlen (ARG)
   _get_action
     _is_command
       _strstr
         _strchr
         _strlen
         _strncmp
           _strlen (ARG)
   _memset

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     200      21       25.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     16      1B       1       28.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1B      20        0.0%
DATA                 0      0     21B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Mon Jan 11 20:44:22 2021

                     l54 094E                       l56 0952                      u250 088E  
                    u190 08C6                      _ISR 0008                     ?_ISR 0001  
                   l1020 0A1A                     l1022 0A1E                     l1030 089A  
                   l1040 08F2                     l1104 0ABE                     l1122 0A0C  
                   l1052 09C4                     l1060 0816                     l1116 09F6  
                   l1038 08EA                     l1144 0956                     l1066 0850  
                   l1090 0A48                     l1138 093C                     l1068 0878  
                   l1084 0A92                     l1094 0A58                     STR_1 080A  
                   STR_2 0801                     STR_3 0808                     _LATD 000F8C  
                   _RCIF 007CF5                     i2l82 0AE2                     _data 0600  
                   _main 090C                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 001C                     start 000E             ___param_bank 000000  
                  ??_ISR 0001                    ?_main 0001    __end_of_data_received 0AC2  
                  _RCREG 000FAE                    _RCSTA 000FAB                    _SPBRG 000FAF  
                  _TRISD 000F95                    _TXSTA 000FAC                    tablat 000FF5  
                  ttemp5 001D                    ttemp6 0020                    ttemp7 0024  
                  status 000FD8                    wtemp8 001D          __end_of_strncmp 090C  
            ?_USART_Init 0001          __initialization 0966             __end_of_main 0966  
       data_received@ptr 0012                   ??_main 0016            __activetblptr 000002  
                 _OSCCON 000FD3                   _TRISC6 007CA6                   _TRISC7 007CA7  
                 _memset 0A3E                   clear_0 098E                   _strchr 09AA  
                 _strlen 0A10                   _strstr 0814             __pdataCOMRAM 0017  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8      __size_of_USART_Init 001A                ??_strncmp 000D  
             __accesstop 0060  __end_of__initialization 099C            ___rparam_used 000001  
         __pcstackCOMRAM 0001                  ?_memset 0003                  ?_strchr 0003  
                ?_strlen 0003                  ?_strstr 000E               _get_action 09E0  
           ??_USART_Init 0003                  __Hparam 0000                  __Lparam 0000  
             _is_command 0A6A             __psmallconst 0800                  __pcinit 0966  
        __size_of_memset 002C                  __ramtop 0800                  __ptext0 090C  
                __ptext1 0A3E                  __ptext2 09E0                  __ptext3 0A6A  
                __ptext4 0A96                  __ptext5 0814                  __ptext6 0898  
                __ptext7 0A10                  __ptext8 09AA                  __ptext9 0AEE  
        __size_of_strchr 0036          __size_of_strlen 002E             __size_of_ISR 0AE6  
        __size_of_strstr 0084       __end_of_USART_Init 0B08                  _strncmp 0898  
         __pintcode_body 0AC2     end_of_initialization 099C                  memset@c 0005  
                memset@n 0007                  memset@p 0009            __Lmediumconst 0000  
                int_func 0AC2   __size_of_data_received 002C                  postdec1 000FE5  
                postinc0 000FEE                  postinc2 000FDE                  strlen@s 0003  
            ?_get_action 0001               main@action 0016              ?_is_command 0012  
          __pidataCOMRAM 0B08           __end_of_memset 0A6A           __end_of_strchr 09E0  
         __end_of_strlen 0A3E            _data_received 0A96           __end_of_strstr 0898  
    start_initialization 0966              __end_of_ISR 0AEE      __size_of_get_action 0030  
               ??_memset 0009                 ??_strchr 0007                 ??_strlen 0005  
               ??_strstr 0012           ?_data_received 0001              __pbssBIGRAM 0600  
            __pbssCOMRAM 001B      __size_of_is_command 002C                __pintcode 0008  
            __smallconst 0800                 ?_strncmp 0007                 _LATDbits 000F8C  
               _PIE1bits 000F9D            is_command@ptr 0014          ??_data_received 0012  
           ??_get_action 0016                copy_data0 097A                 __Hrparam 0000  
               __Lrparam 0000       __end_of_get_action 0A10             ??_is_command 0014  
      is_command@command 0012       __end_of_is_command 0A96         __size_of_strncmp 0074  
          __size_of_main 005A               strncmp@len 000B               _LED_ON_CMD 0019  
             _LED_ON_OFF 0017                 int$flags 001C                 _position 001B  
             _INTCONbits 000FF2                 memset@p1 0003                 intlevel2 0000  
              strchr@chr 0005                strchr@ptr 0003                strncmp@s1 0007  
              strncmp@s2 0009                 strlen@cp 0005                 strstr@s1 000E  
               strstr@s2 0010               _USART_Init 0AEE  
